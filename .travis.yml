notifications:
  email:
    on_success: never
    on_failure: change

language: php
services:
  - mysql

env:
  global:
    - SNIFF=1
    - TEST=1

    # Must match the env variables in .dist.env
    - WP_ROOT_FOLDER=/tmp/wordpress

    # For acceptance and functional tests
    - TEST_SITE_DB_DSN="mysql:host=127.0.0.1;dbname=test_acceptance"
    - TEST_SITE_DB_HOST=localhost
    - TEST_SITE_DB_NAME=test_acceptance
    - TEST_SITE_DB_USER=root
    - TEST_SITE_DB_PASSWORD= #intentionally blank
    - TEST_SITE_TABLE_PREFIX=wp_
    - TEST_SITE_ADMIN_USERNAME=admin
    - TEST_SITE_ADMIN_PASSWORD=password
    - TEST_SITE_WP_ADMIN_PATH=/wp-admin
    - TEST_SITE_WP_URL=http://localhost:8888
    - TEST_SITE_WP_DOMAIN=localhost:8888
    - TEST_SITE_ADMIN_EMAIL=admin@localhost.test

    # For integration tests
    - TEST_DB_NAME=test_integration
    - TEST_DB_HOST=127.0.0.1
    - TEST_DB_USER=root
    - TEST_DB_PASSWORD= #intentionally blank
    - TEST_TABLE_PREFIX=wp_

matrix:
  fast_finish: true
  include:
    - php: 8.0
      env: WP_VERSION=nightly
    - php: 8.0
      env: WP_VERSION=latest
    - php: 7.4
      env: WP_VERSION=latest
    - php: 7.4 # minimum requirements
      env: WP_VERSION=5.5 # minimum requirements
    - php: 5.4
      dist: precise
      env: WP_VERSION=4.9 LEGACY=1 SNIFF=0 TEST=0
  allow_failures:
    - env: WP_VERSION=nightly

cache:
  apt: false

before_install:
  # Create the databases that will be used in the tests.
  - mysql -u root -e "CREATE DATABASE IF NOT EXISTS $TEST_SITE_DB_NAME;"
  - mysql -u root -e "CREATE DATABASE IF NOT EXISTS $TEST_DB_NAME;"
  # Set up folders.
  - mkdir -p $WP_ROOT_FOLDER
  - mkdir tools
  # Install wp-cli.
  - wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -P $(pwd)/tools/
  - chmod +x tools/wp-cli.phar && mv tools/wp-cli.phar tools/wp
  # Append the 'tools' folder to the PATH.
  - export PATH=$PATH:$(pwd)/tools
  # Prepend the 'vendor/bin' folder to the PATH.
  - export PATH=vendor/bin:$PATH

install:
  - phpenv config-rm xdebug.ini
  - composer self-update
  - if [[ "$LEGACY" == "1" ]]; then composer install --no-dev --prefer-source --no-interaction --ignore-platform-reqs ; fi # Ignore platform requirements to install on lower PHP version and check that execution indeed fails.
  - if [[ "$LEGACY" != "1" ]]; then composer install --prefer-source --no-interaction --ignore-platform-reqs ; fi # Ignore platform requirements to install on lower PHP version and check that execution indeed fails.
  # Install and configure WordPress.
  - cd $WP_ROOT_FOLDER
  - wp core download --version=$WP_VERSION
  - wp config create --dbname="$TEST_SITE_DB_NAME" --dbuser="$TEST_SITE_DB_USER" --dbpass="$TEST_SITE_DB_PASSWORD" --dbhost="$TEST_SITE_DB_HOST" --dbprefix="$TEST_SITE_TABLE_PREFIX"
  - wp core install --url="$TEST_SITE_WP_URL" --title="Test" --admin_user="$TEST_SITE_ADMIN_USERNAME" --admin_password="$TEST_SITE_ADMIN_PASSWORD" --admin_email="$TEST_SITE_ADMIN_EMAIL" --skip-email
  - wp rewrite structure '/%postname%/' --hard
  - grep -v 'fastcgi_finish_request();' wp-cron.php > temp && mv temp wp-cron.php # remove after finding a better way to test CRON detection
  # Copy the plugin to the plugins directory.
  - cp -r $TRAVIS_BUILD_DIR/tests/_support/dws-wp-foundations-test-plugin $WP_ROOT_FOLDER/wp-content/plugins/dws-wp-foundations-test-plugin
  - composer install --no-dev --no-interaction --ignore-platform-reqs --working-dir=$WP_ROOT_FOLDER/wp-content/plugins/dws-wp-foundations-test-plugin
  - rm -rf $WP_ROOT_FOLDER/wp-content/plugins/dws-wp-foundations-test-plugin/vendor/deep-web-solutions/wp-framework-foundations/*
  - cp -r $TRAVIS_BUILD_DIR/* $WP_ROOT_FOLDER/wp-content/plugins/dws-wp-foundations-test-plugin/vendor/deep-web-solutions/wp-framework-foundations/
  - rm -fv $WP_ROOT_FOLDER/wp-content/plugins/dws-wp-foundations-test-plugin/vendor/deep-web-solutions/wp-framework-foundations/vendor/autoload.php
  # Activate the test plugin
  - if [[ "$LEGACY" != "1" ]]; then wp plugin activate dws-wp-foundations-test-plugin ; fi
  - if [[ "$LEGACY" != "1" ]]; then wp plugin list --status=active ; fi
  # Generate the db export.
  - wp db export $TRAVIS_BUILD_DIR/tests/_data/dump.sql
  # Make sure the WP directory is writeable.
  - chmod -R 777 $WP_ROOT_FOLDER

before_script:
  - cd $TRAVIS_BUILD_DIR
  - php -S "$TEST_SITE_WP_DOMAIN" -t "$WP_ROOT_FOLDER" >/dev/null 2>&1 &
  - phantomjs --webdriver=4444 >/dev/null 2>&1 &

script:
  # Search for PHP syntax errors.
  - if [[ "$LEGACY" != "1" ]]; then find -L $TRAVIS_BUILD_DIR -path $TRAVIS_BUILD_DIR/vendor -prune -o -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l ; fi
  - if [[ "$LEGACY" == "1" ]]; then find $TRAVIS_BUILD_DIR -maxdepth 1 -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l ; fi
  # Run PHPCS.
  - if [[ "$SNIFF" == "1" ]]; then vendor/bin/phpcs $TRAVIS_BUILD_DIR ; fi
  # Run tests.
  - if [[ "$TEST" == "1" ]]; then codecept run wpunit --steps --debug ; fi
  - if [[ "$TEST" == "1" ]]; then codecept run functional --steps --debug ; fi
